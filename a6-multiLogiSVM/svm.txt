import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# Importing the dataset
data = pd.read_csv('Iris.csv')
data=data.drop('Id',axis=1)
data.head()



from sklearn import preprocessing

# Splitting the dataset into dependent and independent variables
data=np.array(data) 
X=data[:100,:-1]
Y=data[:100,-1]
labels=np.unique(Y)
print(labels)
# Convert labels into numbers
for i in range (len(Y)):
  Y[i]=list(labels).index(Y[i])
Y=Y.astype('int32')
Y=np.array(Y)
Y=np.where(Y<=0,-1,1)
print(Y.dtype)

# Scaling the independent variables
X=preprocessing.scale(X)
print(np.shape(X));

# Splitting the dataset into training and testing datasets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2,random_state=25)


# training function for SVM
def train(X,y,epochs,lr,l):
  n=X.shape[1]
  w=np.zeros(n)
  b=0
  for _ in range(epochs):
    for i,x in enumerate(X):
      cond=y[i]*(np.dot(x,w)-b)>=1
      if cond:
        w-=lr*(2*l*w)
      else:
        w-=lr*(2*l*w-np.dot(x,y[i]))
        b=lr*y[i]
  return w,b



def predictions(X,w,b):
  y_pred=np.dot(X,w)-b
  return np.sign(y_pred)
  


# Training the model
w,b=train(x_train,y_train,1000,0.1,0.001)



# Testing the model on test data
y_pred=predictions(x_test,w,b)
print(y_pred)
print(y_test)


# Finding the accuracy of the model
length=0
positive=0
for i in range(np.size(y_pred)):
  if(y_test[i]==y_pred[i]):
    positive+=1
  length+=1
accuracy=positive/length
print("Accuracy: ",accuracy*100)